<? namespace Intervolga\Migrato\Data\Module\Catalog;

use Bitrix\Catalog\RoundingTable;
use Bitrix\Main\Localization\Loc;
use Intervolga\Migrato\Data\BaseData;
use Intervolga\Migrato\Data\Link;
use Intervolga\Migrato\Data\Record;
use Bitrix\Catalog\GroupTable;
use Intervolga\Migrato\Tool\XmlIdProvider\BaseXmlIdProvider;

Loc::loadMessages(__FILE__);

class Rounding extends BaseData
{

    public function getList(array $filter = array())
    {
        $result = array();
        $roundingPriceTypes = $this->getRoundingPriceTypes();
        $getList = RoundingTable::getList();
        while ($rounding = $getList->fetch())
        {
            $record = new Record($this);
            $id = $this->createId($rounding["ID"]);
            $record->setId($id);
            $record->setXmlId(
                $this->getXmlId($id)
            );
            $record->addFieldsRaw(array(
                "PRICE" => $rounding["PRICE"],
                "ROUND_TYPE" => $rounding["ROUND_TYPE"],
                "ROUND_PRECISION" => $rounding["ROUND_PRECISION"],
            ));

            $link = clone $this->getDependency("PRICE_TYPE");
            $link->setValues($roundingPriceTypes[$rounding["ID"]]);
            $record->setDependency('PRICE_TYPE', $link);

            $result[] = $record;
        }
        return $result;
    }


    public function getDependencies()
    {
        return array(
            "PRICE_TYPE" => new Link(PriceType::getInstance()),
        );
    }

    protected function getRoundingPriceTypes()
    {
        $result = array();
        $getList = GroupTable::getList();
        while ($roundingPriceType = $getList->fetch())
        {
            $result[$roundingPriceType["PRICE_TYPE_ID"]][] = PriceType::getInstance()->getXmlId(
                PriceType::getInstance()->createId($roundingPriceType["SITE_ID"])
            );
        }

        return $result;
    }

    public function generateXmlId()
    {
        return '';
    }

    public function setXmlId($id, $xmlId)
    {
        // XML ID is autogenerated, cannot be modified
    }

    public function getXmlId($id)
    {
        $record = RoundingTable::getById($id->getValue())->fetch();
        $roundingPriceTypes = $this->getRoundingPriceTypes();

        $md5 = md5(serialize(array(
            $record['PRICE'],
            $record['ROUND_TYPE'],
            $record['ROUND_PRECISION'],
            $roundingPriceTypes[],
        )));

        return BaseXmlIdProvider::formatXmlId($md5);
    }
}