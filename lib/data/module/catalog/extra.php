<? namespace Intervolga\Migrato\Data\Module\Catalog;

use Bitrix\Catalog\ExtraTable;
use Bitrix\Main\Localization\Loc;
use Intervolga\Migrato\Data\BaseData;
use Intervolga\Migrato\Data\Record;
use Intervolga\Migrato\Tool\XmlIdProvider\BaseXmlIdProvider;

Loc::loadMessages(__FILE__);

class Extra extends BaseData
{

    public function getList(array $filter = array())
    {
        $result = array();
        $getList = ExtraTable::getList();
        while ($extra = $getList->fetch())
        {
            $record = new Record($this);
            $id = $this->createId($extra["ID"]);
            $record->setId($this->createId($extra["ID"]));
            $record->setXmlId($this->getXmlId($id));
            $record->addFieldsRaw(array(
                "NAME" => $extra["NAME"],
                "PERCENTAGE" => $extra["PERCENTAGE"],
            ));
            $result[] = $record;
        }
        return $result;
    }

    public function generateXmlId()
    {
        return '';
    }

    public function setXmlId($id, $xmlId)
    {
        // XML ID is autogenerated, cannot be modified
    }

    public function getXmlId($id)
    {
        $record = ExtraTable::getById($id->getValue())->fetch();

        $md5 = md5(serialize(array(
            $record["NAME"],
            $record["PERCENTAGE"],
        )));

        return BaseXmlIdProvider::formatXmlId($md5);
    }

    public function update(Record $record)
    {
        $update = $record->getFieldsRaw();

        $object = new \CExtra();
        $id = $record->getId()->getValue();
        $updateResult = $object->update($id, $update);
        if (!$updateResult)
        {
            global $APPLICATION;
            throw new \Exception($APPLICATION->getException()->getString());
        }
    }

    protected function createInner(Record $record)
    {
        $add = $record->getFieldsRaw();

        $object = new \CExtra();
        $id = $object->add($add);
        if (!$id)
        {
            global $APPLICATION;
            throw new \Exception($APPLICATION->getException()->getString());
        }
        else
        {
            return $this->createId($id);
        }
    }

    protected function deleteInner($xmlId)
    {
        $id = $this->findRecord($xmlId);
        if ($id)
        {
            $object = new \CExtra();
            if (!$object->delete($id->getValue()))
            {
                throw new \Exception(Loc::getMessage('INTERVOLGA_MIGRATO.UNKNOWN_ERROR'));
            }
        }
    }

}